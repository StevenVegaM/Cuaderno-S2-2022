{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPkYImlXr3tj8BcdOKzkDuj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/StevenVegaM/Cuaderno-S2-2022/blob/main/Semana%205\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZNrMKsjkWMuG"
      },
      "outputs": [],
      "source": [
        "#Semana 5"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##total de digitos divisibles\n",
        "\n",
        "\n",
        "```\n",
        "def totalDigitosDivisibles(num, div):\n",
        "    contador = 0\n",
        "    valor = 0\n",
        "    if isinstance(num, int) and isinstance(div, int):\n",
        "        if div > 0:\n",
        "            while num > 0:\n",
        "                valor = num % 10\n",
        "                if num % div == 0:\n",
        "                    contador += 1\n",
        "                    num = num // 10\n",
        "            return contador\n",
        "    else:\n",
        "        return \"Error: un parametro no es entero\"\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "JCrD75CkWRjR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##total numeros primos\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "def totalNumerosPrimos(num):\n",
        "    digito = 2\n",
        "    resultado = 0 \n",
        "    if isinstance(num, int):\n",
        "        if num > 1:\n",
        "            while num != 1:\n",
        "                if esPrimo(digito):\n",
        "                    resultado += 1\n",
        "                digito += 1\n",
        "            return resultado\n",
        "    else:\n",
        "        return \"Error: el parametro num no es entero\"\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "eXii2k-iWdym"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Sumatoria For\n",
        "\n",
        "\n",
        "```\n",
        "def sumatoriaFor(inicio, fin):\n",
        "    resultado = 0\n",
        "    if(inicio >= 0) and (fin >= 0) and (inicio <= fin):\n",
        "        for numero in range(inicio, fin + 1):\n",
        "             resultado += numero\n",
        "             return resultado\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "Yg9LYWjBZneR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Multiplicar lista While\n",
        "\n",
        "\n",
        "```\n",
        "def multi(lista):\n",
        "    res = 1 \n",
        "    if isinstance(lista, list):\n",
        "        return multi_While(lista, res)\n",
        "    else:\n",
        "        return \"Error, debe ser una lista\"\n",
        "def multi_While(lista, res):\n",
        "    while lista != []:\n",
        "        if isinstance(lista[0], int) or isinstance(lista[0], float):\n",
        "            res *= lista[0]\n",
        "            lista = lista[1:]\n",
        "        else:\n",
        "            continue\n",
        "    return res\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "oTu0uwMnQg0N"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Multiplicar lista For\n",
        "\n",
        "\n",
        "```\n",
        "def multLista(lista):\n",
        "    resultado = 1 \n",
        "    if isinstance(lista, list):\n",
        "        if lista != []:\n",
        "            for digito in lista:\n",
        "                resultado *= digito\n",
        "            return resultado\n",
        "        else:\n",
        "            return \"Error, la lista esta vacia\"\n",
        "    else:\n",
        "        return \"Error, el valor ingresadso no es una lista\"\n",
        "```\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "McEATdQ1RdYN"
      }
    }
  ]
}